import os
import asyncio
from amocrm import AmoCRMClient
from amocrm.models import Lead, BranchIsNotOnline, Event
from aiogram import Bot
from dotenv import load_dotenv
from loguru import logger
from google_sheets import GoogleSheets
from datetime import datetime

from scheduler import Scheduler


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

SECONDS = int(os.getenv('seconds'))
UPDATED_FIELDS = (
    691104, # first_name
    691102, # last_name
    691120, # grade
    691118, # department
    802046, # status
    691138, # learning direction
    799986, # city
    803170, # pp_manager name
    691136, # learning time
    691134, # branch
    691128, # subjects
    691170, # amount
    693110, # credit
    803189, # credit 2
    803191, # credit 3
    803193, # credit 4
    799680, # method
    800320, # base_course
    800322, # intensive cource
    798554, # summer camp
    691152, # start date
    691176, # end_date
    803014, # payment parent name
    691010, # parent name
    691108, # parent phone
    802044, # –ö–æ–º–º–µ–Ω—Ç –û–ü comment
    670397, # email
    803201, # –¥–æ–ª–≥ –∫–ª–∏–µ–Ω—Ç–∞
    803203 # –æ–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞
)
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
current_directory_name = os.path.basename(os.getcwd())

os.makedirs(".", exist_ok=True)  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

log_file_path = os.path.join(
    "logs", f"{current_directory_name}_{{time:YYYY-MM-DD}}.log"
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
logger.add(
    log_file_path,  # –§–∞–π–ª –ª–æ–≥–∞ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ –¥–∞—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    rotation="00:00",  # –†–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å
    retention="7 days",  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",  # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ
    level="INFO",  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    compression="zip",  # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
)

bot = Bot(os.getenv("telegram_token"))
google = GoogleSheets()
amo_client = AmoCRMClient(
    base_url="https://teslakz.amocrm.ru",
    access_token=os.getenv("access_token"),
    client_id=os.getenv("client_id"),
    client_secret=os.getenv("client_secret"),
    permanent_access_token=True,
)


async def send_to_telegram(lead: Lead):
    await bot.send_message(
        lead.telegram_chat.chat_id,
        f"<u>–ü—Ä–∏–º–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞</u>.üòä\n"
        f"–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: <b>{lead.payment.date}</b>\n\n"
        f"ü§ì–£—á–µ–Ω–∏–∫: <b>{lead.learner.last_name} {lead.learner.first_name}</b>\n"
        f"‚úîÔ∏è–ö–ª–∞—Å—Å –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ: <b>{lead.learner.grade} {lead.learner.departament}</b>\n"
        f"‚è∞–í—Ä–µ–º—è: <b>{lead.learning_time}</b>\n"
        f"üë©‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å: <b>{lead.parent.name}</b>\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>{lead.parent.phone}</b>\n"
        f"üè† –§–∏–ª–∏–∞–ª: <b>{lead.branch}</b>\n\n"
        f"üî∑ –°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è: <b>{'' if lead.learning_duration == '' else lead.learning_duration + ' –º–µ—Å.'}</b>\n\n"
        f"üü¢ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: <b>{lead.start_date}</b>\n"
        f"üî¥ –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –æ–±—É—á–µ–Ω–∏—è: <b>{lead.end_date}</b>\n\n"
        f"üéØ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è: <b>{lead.learner.learning_direction}</b>\n"
        f"üìö–ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: <b>{lead.learner.profile_subjects}</b>\n"
        f"‚ÑπÔ∏è–ù–æ–≤—ã–π –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ: <b>{lead.status}</b>\n"
        f"üì®–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –û–ü: <b>{lead.manager.comment}</b>\n\n"
        f"üòé–ú–µ–Ω–µ–¥–∂–µ—Ä: <b>{lead.manager.name}</b>",
        parse_mode="HTML",
    )


def send_to_google(lead: Lead):
    data_insert = [
        datetime.now().strftime("%Y.%m.%d %H:%M:%S"),
        datetime.strptime(lead.payment.date, "%Y-%m-%d").strftime("%Y.%m.%d"),
        lead.city,
        lead.manager.name,
        lead.pp_manager.name,
        lead.learner.last_name + " " + lead.learner.first_name,
        lead.learner.learning_direction,
        lead.learner.grade,
        lead.learner.departament,
        lead.learning_time,
        lead.branch,
        lead.learner.profile_subjects,
        lead.payment.amount,
        lead.payment.credit,
        lead.payment.credit2,
        lead.payment.credit3,
        lead.payment.credit4,
        lead.payment.method,
        lead.payment.debt,
        lead.payment.expected_amount,
        lead.base_course,
        lead.intensive_cource,
        lead.summer_camp,
        lead.status,
        "",
        lead.start_date,
        lead.end_date,
        lead.parent.name,
        lead.payment.parent.name,
        lead.parent.phone,
        lead.manager.comment,
        lead.parent.email,
    ]

    google.insert_row(
        data_insert, 
        google.get_filled_row_count(
            'online' if lead.branch == '–û–Ω–ª–∞–π–Ω' else 'offline'
        ) + 1,
        'online' if lead.branch == '–û–Ω–ª–∞–π–Ω' else 'offline'
    )


async def update_leads(timestamp: int, curr_timestamp: int):
    try:
        leads_response = await amo_client.get_updated_leads(timestamp, curr_timestamp)
        event_response = await amo_client.get_update_events(timestamp, curr_timestamp)
        events_json = event_response.get('_embedded', {}).get('events', {})
        events = {}
        for event_json in events_json:
            if event_json.get('entity_id') not in events:
                events[event_json.get('entity_id')] = []
            events[event_json.get('entity_id')].append(event_json.get('value_after', [{}])[0].get('custom_field_value', {}).get('field_id'))
        leads_json = leads_response.get('_embedded', {}).get('leads', {})
        if leads_json:
            for lead_json in leads_json:
                try:
                    lead = Lead.from_json(lead_json) 
                    if lead.manager.id:
                        lead.manager.set_name(await amo_client.get_user(lead.manager.id))
                    if lead.parent.id:
                        lead.parent.set_email(await amo_client.get_contact(lead.parent.id))
                    if lead.id in events:
                        field_ids = events.get(lead.id, [])
                        for field_id in field_ids:
                            if field_id in UPDATED_FIELDS:
                                send_to_google(lead)
                                break
                except Exception as e:
                    logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}')
    except Exception as ex:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫: {ex}')
    pass


async def polling_leads(timestamp: int, curr_timestamp: int):
    amo_client.start_session()
    try:
        response = await amo_client.get_events(timestamp)
        events_json = response.get('_embedded', {}).get('events', {})
        if events_json:
            for event_json in events_json:
                try:
                    event = Event.from_json(event_json)    
                    if event.entity_id:
                        lead = Lead.from_json(await amo_client.get_lead(event.entity_id)) 
                        if lead.manager.id:
                            lead.manager.set_name(await amo_client.get_user(lead.manager.id))
                        if lead.parent.id:
                            lead.parent.set_email(await amo_client.get_contact(lead.parent.id))
                    await send_to_telegram(lead)

                    send_to_google(lead)
                except BranchIsNotOnline:
                    pass
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–µ–ª–∫–∏: {e}")
        # update_leads(timestamp, curr_timestamp)
    except:
        pass
    finally:
        await amo_client.close_session()


async def main():
    scheduler = Scheduler(polling_leads, SECONDS)
    bot_info = await bot.get_me()
    logger.info(f"–ë–æ—Ç[{bot_info.id}] @{bot_info.username}")
    while True:
        try:
            await scheduler.start()
            await asyncio.sleep(600)
        except Exception as ex:
            print(ex)
        finally:
            await scheduler.stop()


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    